Denna text förklarar hur mak kommunicerar med backend servern
För att kommunicera med backend behövs 'whatwg-fetch' för att sätta body taggen
App.js måste allstå innehålla en rad som står:
    import 'whatwg-fetch'
Man behöver även skriva npm install whatwg-fetch för att installera det

För att koppla sig till webservern behöver man lägga till rad i
package.json som står: "proxy": "http://localhost:5000/",


COIN
    Coin används inte någon GET eller POST request men istället använder den
    websockets. På så vis kan servern skicka uppdateringar till clienten varje
    gång Coin har uppdaterats.

    Det som skickas från servern till klienten är en JSON sträng:
        {timeleft: tid_som_är_kvar, winner: [heads/tails, [lista på alla vinnare]]}

        Om det finns dit kvar är winner null. Om det inte finns tid kvar är
        timeleft null och winner är inte längre null.


    För att koppla upp sig mot coin behövs en websocket. 'isomorphic-ws' funkar
    för mig. 'npm install isomorphic-ws ws --save'. Coin ligger på samma ip-address
    som servern men har port nummer 5001.

    Exempel kod på uppkoppling till coin:
        const WebSocket = require('isomorphic-ws');
        const ws = new WebSocket('ws//193.10.236.94:5001'); // Kopplad mot coinen

        // När medelanden kommer körs funktionen updateCoinStatus
        ws.onmessage = updateCoinStatus;

        updateCoinStatus(data) {
            // Här är data.data JSON strängen
            CoinStatus = JSON.parse(data.data);
        }



POST /register_user
    Detta används för att registrera nya användare.

    Returnerar användarnamnet om registering lyckades, annars null.

    För att registrera nya användare behöver man ange användernamn och lösenord
    detta görs genom att lägga in den informationen i body.
        Body ska vara en json sträng som innehåller följande:
            {usename: 'ny användare', password: 'hemlight lösenord}
        
    exepmel kod för att registrera ny användare på klienten:
        Denna kod skapar en function registerUser som returnerar användarnamnet

        register_user = async () => {
            // data innehåller informationen som behövs i header
            const data = {username: `${username}`, password: `${password}`};

            // gör förfrågningen med fetch functionen.
            const response = await fetch('/register_user', {
                method: 'POST',
                body: JSON.stringify(data), // Gör om data till en json sträng
                // jag fick det inte att fungera utan headers, du kan pröva
                headers: {
                    'Accept': 'application/json', 'Content-Type': application/json'
                }
            });

            // Här kollar vi på svaret som vi får av servern
            const body = await response.json();
            if (response.status !== 200) {
                // Någon har gått fel
                throw Error(body.message)
            }
            //returnerar svar från backend vilket är användarnamnet
            return body
        }



POST /login
    Detta används för att logga in.
    
    Returnerar användarnamnet om inloggning lyckades, annars false.

    Ange användarnamn och lösenord på samma sätt
    som man gör när man registrerar. Allstå med en body som innehåller en
    json sträng:
        {username: användare, password: lösenord}

    Kod för /login ser nästan likadan ut som för /register_user



POST /place_bet
    Detta används för att satsa på 'heads' eller 'tails'

    Returnerar en sträng som säger 'Bet placed by ${user} on ${heads/tails} for ${amount}'

    För att satsa på heads eller tails behöver GET anropet en body som innehåller en sträng:
        {bet: 'heads' eller 'tails', username: 'användarnamn', amount: 'belopp att satsa'}

    Om beloppet som satsas är större än vad användaren har att satsa blir beloppet lika med
    vad användaren har.

    Exempel kod för att satsa 1 på heads:
        placeBet = async () => {
            // Här sätts vad, vem och hur mycket
            const data = {bet: "heads", username: "test_user", amount: 1};

            const response = await fetch('/place_bet', {
                method: 'POST',
                body: JSON.stringify(data),
                headrs: {'Accept':'application/json', 'Content-Type': 'application/json'}
            });

            const body = await response.json();
            if (response.status !== 200) {
                throw Error(body.message);
            }
            return body.express;
        }
