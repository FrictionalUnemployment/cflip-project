Servern startas med 'node server.js'
Om servern är på samma dator som databasen kan man skriva 'local=true node server.js'
detta gör så att servern kommunicerar med databasen via pipes sockets istället för nätverket.


Denna text förklarar hur mak kommunicerar med backend servern
För att kommunicera med backend behövs 'whatwg-fetch' för att sätta body taggen
App.js måste allstå innehålla en rad som står:
    import 'whatwg-fetch'
Man behöver även skriva npm install whatwg-fetch för att installera det

För att koppla sig till webservern behöver man lägga till rad i
package.json som står: "proxy": "http://193.10.236.94:5000/",


COIN
    Coin används inte någon GET eller POST request men istället använder den
    websockets. På så vis kan servern skicka uppdateringar till clienten varje
    gång Coin har uppdaterats.

    Det som skickas från servern till klienten är en JSON sträng:
        {timeleft: tid_som_är_kvar, winner: [heads/tails, [lista på alla vinnare]]}

        Om det finns dit kvar är winner null. Om det inte finns tid kvar är
        timeleft null och winner är inte längre null.


    För att koppla upp sig mot coin behövs en websocket. 'isomorphic-ws' funkar
    för mig. 'npm install isomorphic-ws ws --save'. Coin ligger på samma ip-address
    som servern men har port nummer 5001.

    Exempel kod på uppkoppling till coin:
        const WebSocket = require('isomorphic-ws');
        const ws = new WebSocket('ws//193.10.236.94:5001'); // Kopplad mot coinen

        // När medelanden kommer körs funktionen updateCoinStatus
        ws.onmessage = updateCoinStatus;

        updateCoinStatus(data) {
            // Här är data.data JSON strängen
            CoinStatus = JSON.parse(data.data);
        }



POST /register_user
    Detta används för att registrera nya användare.
    Ett användarnamn får bara innehålla a-z, A-Z, 0-9, - och _
    den för vara mellan 3-15 långt

    Returnerar användarnamnet om registering lyckades, annars null.

    För att registrera nya användare behöver man ange användernamn och lösenord
    detta görs genom att lägga in den informationen i body.
        Body ska vara en json sträng som innehåller följande:
            {usename: 'ny användare', password: 'hemlight lösenord}
        
    exepmel kod för att registrera ny användare på klienten:
        Denna kod skapar en function registerUser som returnerar användarnamnet

        register_user = async () => {
            // data innehåller informationen som behövs i header
            const data = {username: `${username}`, password: `${password}`};

            // gör förfrågningen med fetch functionen.
            const response = await fetch('/register_user', {
                method: 'POST',
                body: JSON.stringify(data), // Gör om data till en json sträng
                // jag fick det inte att fungera utan headers, du kan pröva
                headers: {
                    'Accept': 'application/json', 'Content-Type': application/json'
                }
            });

            // Här kollar vi på svaret som vi får av servern
            const body = await response.json();
            if (response.status !== 200) {
                // Någon har gått fel
                throw Error(body.message)
            }
            //returnerar svar från backend vilket är användarnamnet
            return body
        }



POST /login
    Detta används för att logga in.
    
    Returnerar användarnamnet om inloggning lyckades, annars false.

    Ange användarnamn och lösenord på samma sätt
    som man gör när man registrerar. Allstå med en body som innehåller en
    json sträng:
        {username: användare, password: lösenord}

    Kod för /login ser nästan likadan ut som för /register_user



POST /place_bet/:bet/:amount
    Detta används för att satsa på 'heads' eller 'tails'.
    Där det står :bet ska det stå 'heads' eller 'tails'.
    Där det står :amount ska det vara beloppet att satsa.

    Returnerar en sträng som säger 'Bet placed by ${user} on ${heads/tails} for ${amount}'
    Om användaren redan har lagt ett bet på denn flip returnerar den:
        '${user} has existing bet on this flip. Cancelling bet.'

    Om beloppet som satsas är större än vad användaren har att satsa blir beloppet lika med
    vad användaren har.

    Exempel kod för att satsa 1 på heads:
        placeBet = async () => {
            // Här sätts vad, vem och hur mycket

            const response = await fetch('/place_bet/heads/10', {
                method: 'POST',
                headers: {'Accept':'application/json', 'Content-Type': 'application/json'}
            });

            const body = await response.json();
            if (response.status !== 200) {
                throw Error(body.message);
            }
            return body;
        }


GET /stats/toplist/:top/:limit
    Detta används för att visa top eller bottom lista.
    Där det står :top ska det stå antingen 'top' eller 'bottom'
    Där det står :limit ska det stå hur många resultat du vill få tillbaks

    Returnerar en json sträng som innehåller en lista.
    Varje object i listan har Username, Balance, Wins, Losses där Wins och Losses
    är antalet vinster eller förluster.
    Det går att nå detta med t.ex ret[i].Username

    Exempel kod för att se top 10
        // Jag har inte ens kollat om detta funkar
        top10 = async () => {
            const response = await fetch('/stats/all/top/10')
            const body = await response.json();
            if (response.status !== 200) {
                throw Error(body.message);
            }
            return body;
        }


GET /stats/user/:user
    Detta används för att få information om en användare.
    Där det står :user ska det stå användarnamnet.

    Returnerar en json sträng av ett object med följande properties:
        Username, Balance, Wins, Losses
    Där Username är användarnamnet, Balance är hur mycket pengar användaren har på kontot,
    Wins är en lista som innehåller alla FID som användaren har förlorat på,
    Losses är en lista som innehåller alla FID som användaren har vunnit på.
    
    Exempel kod
        Skriv själv lata fan


GET /stats/flip/:FID
    Detta används för att få statistik om en flip.
    Där det står :FID ska det stå Flip id.

    Returnerar en json sträng av ett object med följande properties:
        result, time, winners, losers
    Där result är 'heads' eller 'tails', time är UNIX tidstämpel för när flippen
    utfördes, winners och losers är en lista av object.

    Properties för object i winners och losers listorna är användarnamnet,
    value för den property är hur mycket användaren har förlorat eller vunnit.

    För att ta fram användarnamnet kan man göra till ex:
        for (let prop in ans.winners) { // Kollar alla props som winners har
            let username = prop; // prop är användarnamnet
            let bet_value = ans.winners[prop]; // Hur mycket denna användaren har satsat
        }


GET /Userlist
    Returnerar en json lista av alla avnändare i alfabetisk ordning
    Inget att Konfigurera


GET /captcha
    Returnerar en svg sträng som webbläsaren kan visa. Du måste skapa nåt sätt för
    usern att göra en input och posta den till /captcha

POST /captcha
    Returnerar sant om captcha stämde med user input, annars returnerar den falsk
    Om falskt bör man köra GET på /captcha igen och hämta en ny bild
    Userinput sätts till body.input

    Exempel kod:
        captcha = async () => {
            const response = await fetch('/captcha', {
                method: 'POST',
                body: JSON.stringify({input: detanvänderanharlagtin}),
                headrs: {'Accept':'application/json', 'Content-Type': 'application/json'}
            });

            return response;
        })
